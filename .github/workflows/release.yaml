name: Release

on:
  release:
    types: [published]
  push:
    tags:
      - 'v*'

permissions:
  contents: read
  id-token: write  # For trusted publishing to PyPI

jobs:
  build:
    name: Build distribution packages
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build source and wheel distributions
        run: |
          python -m build

      - name: Check distributions
        run: |
          twine check --strict dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-packages
          path: dist/

  test-built-package:
    name: Test built package
    runs-on: ubuntu-latest
    needs: build

    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12', '3.13']

    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-packages
          path: dist/

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libxml2-dev libxslt-dev

      - name: Install package from wheel
        run: |
          pip install --find-links dist/ gnucash-ch-filing[test] --no-index

      - name: Test installation
        run: |
          python -c "import ch_filing; print('✓ Package installed successfully')"
          ch-filing --help
          ch-mock-server --help

      - name: Run smoke tests
        run: |
          python -c "
          from ch_filing.client import Client
          from ch_filing.state import State
          from ch_filing.test_server import MockServer
          import tempfile, json, pathlib
          
          # Create minimal test
          tmp_dir = pathlib.Path(tempfile.mkdtemp())
          config_file = tmp_dir / 'config.json'
          config_data = {
              'presenter-id': 'TEST',
              'authentication': 'TEST',
              'company-number': '12345678',
              'made-up-date': '2023-12-31',
              'url': 'http://localhost:9999/v1-0/xmlgw/Gateway'
          }
          with open(config_file, 'w') as f:
              json.dump(config_data, f)
          
          state_file = tmp_dir / 'state.json'
          state = State(str(config_file), str(state_file))
          client = Client(state)
          
          print('✓ Core functionality works')
          "

  publish-to-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build, test-built-package]
    if: github.event_name == 'release' && github.event.action == 'published'

    environment:
      name: pypi
      url: https://pypi.org/p/gnucash-ch-filing

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-packages
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true

  publish-to-test-pypi:
    name: Publish to Test PyPI
    runs-on: ubuntu-latest
    needs: [build, test-built-package]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    environment:
      name: testpypi
      url: https://test.pypi.org/p/gnucash-ch-filing

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-packages
          path: dist/

      - name: Publish to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          verbose: true

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build, test-built-package]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-packages
          path: dist/

      - name: Extract tag name
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: Release ${{ env.TAG_NAME }}
          body: |
            ## Changes in ${{ env.TAG_NAME }}
            
            This release includes the latest improvements to the GnuCash Companies House filing system.
            
            ### Installation
            
            ```bash
            pip install gnucash-ch-filing==${{ env.TAG_NAME }}
            ```
            
            ### Usage
            
            ```bash
            ch-filing --help
            ch-mock-server --help
            ```
            
            See the README.md for detailed usage instructions.
          draft: false
          prerelease: ${{ contains(env.TAG_NAME, 'rc') || contains(env.TAG_NAME, 'alpha') || contains(env.TAG_NAME, 'beta') }}

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/
          asset_name: python-packages
          asset_content_type: application/zip

  update-documentation:
    name: Update documentation
    runs-on: ubuntu-latest
    needs: publish-to-pypi
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install documentation dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[test]
          pip install sphinx sphinx-rtd-theme

      - name: Generate API documentation
        run: |
          sphinx-quickstart -q -p "GnuCash CH Filing" -a "Cybermaggedon" --ext-autodoc docs/
          sphinx-apidoc -o docs/ ch_filing/
          cd docs && make html

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: success()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: docs/_build/html